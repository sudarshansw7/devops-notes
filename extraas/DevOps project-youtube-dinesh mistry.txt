DevOps project
-------------------
maven integration
pipeline maven integration
eclips temurin installer

apt update 
apt upgrade -y
-----------------------
-->install Adoptium java 17
-->add repo
------------------
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
---------------
-->install java 17
apt update
apt install temurin-17-jdk
----------------
-->install jenkins
-->first add repo and install jenkins
------------------
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins
------------
-->create new agent-jenkins on new machinen 
sudo apt update 
sudo adduser jenkins
sudo usermod -aG sudo jenkins
--------
-->install java adoptium on agent machine
-->adding repo
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list

apt update
apt install temurin-17-jdk
------------
-->install docker on agen machine
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
--------
groupadd docker
usermod -aG docker jenkins
su - jenkins
newgrp docker
docker run hello-world
------
-->establish ssh connection from main jenkins to agent-jenkins
----------
-->goto jenkins webpage
-->goto manage jenkins-->goto manage nodes and clouds-->click on built-in nodes-->configure-->number of excuters make 0-->save
-------
Now crate a new node(jenkins-agent)-->select permanent agent-->number of excuters (2)-->remote root directory(/home/jenkins)-->labels(jenkins-agent)-->usage(use this node as muxh as possible)-->launch method(launch agent via ssh)-->Host(agent_private_ip)-->click on add jenkins-->(select ssh username and private key)-->id(jenkins-agent-key)-->description(jenkins-agent-private-key)-->username(jenkins)-->enter directly select(paste the rsa.pub)-->add-->save

---------------
install sonarqube on new machine
apt update 
add postgresql repo
--------------------
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null
-----
install postgres
-----
sudo apt update
sudo apt-get -y install postgresql postgresql-contrib
sudo systemctl enable postgresql
-----
-->now create a database 
sudo passwd postgres
su - postgres
createuser sonar
psql 

ALTER USER sonar WITH ENCRYPTED password 'sonar';
CREATE DATABASE sonarqube OWNER sonar;
grant all privileges on DATABASE sonarqube to sonar;
\q
exit

----------------
-->now install java17
sudo bash
 
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list

apt update
apt install temurin-17-jdk
update-alternatives --config java

--------------------

sudo vim /etc/security/limits.conf

-->add these values
sonarqube   -   nofile   65536
sonarqube   -   nproc    4096

sudo vim /etc/sysctl.conf

vm.max_map_count = 262144

sudo reboot

-->after reboot excute these commands 

sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.0.65466.zip
sudo apt install unzip
sudo unzip sonarqube-9.9.0.65466.zip -d /opt
sudo mv /opt/sonarqube-9.9.0.65466 /opt/sonarqube

sudo groupadd sonar
sudo useradd -c "user to run SonarQube" -d /opt/sonarqube -g sonar sonar
sudo chown sonar:sonar /opt/sonarqube -R

-->update db and sonarquebe

sudo vim /opt/sonarqube/conf/sonar.properties

sonar.jdbc.username=sonar
sonar.jdbc.password=sonar
sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube

sudo vim /etc/systemd/system/sonar.service

-->paste these file
-----------
[Unit]
Description=SonarQube service
After=syslog.target network.target

[Service]
Type=forking

ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop

User=sonar
Group=sonar
Restart=always

LimitNOFILE=65536
LimitNPROC=4096

[Install]
WantedBy=multi-user.target

------------------
sudo systemctl start sonar
sudo systemctl enable sonar
sudo systemctl status sonar


sudo tail -f /opt/sonarqube/logs/sonar.log


http://<IP>:9000
---------------------------
-->installing nginx for reverse proxy
sudo apt install nginx
vi /etc/nginx/sites-available/sonarqube.conf
----
server {

    listen 80;
    server_name sonarqube.dev.dman.cloud;
    access_log /var/log/nginx/sonar.access.log;
    error_log /var/log/nginx/sonar.error.log;
    proxy_buffers 16 64k;
    proxy_buffer_size 128k;

    location / {
        proxy_pass http://127.0.0.1:9000;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
    }
}
---
sudo ln -s /etc/nginx/sites-available/sonarqube.conf /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx

sudo apt install certbot python3-certbot-nginx

sudo certbot --nginx -d sonarqube.dev.dman.cloud

----------
-->here goto sonarqube generate global analysis token)
generate token in Sonarqube
-------------------------------------
-->goto myaccount-->select security-->there generate token 
-->copy thos token and provide in jenkins in credential section
----------
-->goto jenkins webpage paste those secret key in key section -->goto manage jenkins--credentials--system--globalcredentials--kind(secret text)--provide tokens in secreet box--id(jenkins-sonarqube-token)--description(jenkins-sonarqube-token)--create
--------------------------------------
here some pluggins needed
---------------------------------------- 
-->sonarqubeScanner, and sonar quality gates , quality gates  download pluggins and restart jenkins
---------------------------------------
now goto manage jenkins-->configure system--> find sonarqube servers-->select environment variables
then add scanner-->providename(sonarqube-scanner)-->serverurl(https://sonanr_private_ip:9000(or)publicIP)-->select server authentication token(jenkins-sonarqube)-->apply and save
-------------------------
now again goto manage jenkins-->global tool configuration-->find sonarqubescanner-->add sonarqube scanner-->provide name(sonarqube-scanner-latest)
-------------------------------

jenkins webpage:
-------------------------
stage("sonarqube Analysis"){
            steps{
                script{
                     withSonarQubeEnv(credentialsId: 'jenkins-sonarqube'){
                    sh "mvn sonar:sonar"

--------------------------

Introducing QualityGate
--------------------------------
-->Quality gate means project does not pass we can block the deployment 
-->in ordered to do that do need to have a webhook that can respond back jenkins
-->Quality gate check code is ok then it is send a message to jenkins by webhooks specified in the sonarqube then only jenkins build job completely 
steps: to do
--------------
in sonarqube-->goto administration-->under configuration-->select webhooks-->create webhook-->provide name(jenkins-webhook)-->under URL(https:jenkins_public_ip:8080/sonarqube-webhook/)-->click on secret

Jenkins webpage:
--------------------------
stage("Quality Gate"){
            steps{
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube'
                }
            }
        }
--------------------------------


Build and push docker containers:
------------------------------------------------ 
install some pluggins for this
-->docker, docker commons, docker pipeline, docker API, docker build step, cloudBees docker build and publish 
-->after complete restart jenkins 
-->create environments inside agent02
 environment {
        APP_NAME = "myApp"
        RELEASE = "1.0.0"
        DOCKER_USER = "navathej408"
        DOCKER_PASS = 'dockerhub'
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

----------------------
-->here generate access tokens from docker hub copy those token number and paste on jenkins webpage inside docker credentials
-->goto jenkins web page-->manage jenkins-->credentials-->system-->global credentials unrestricted-->kind(username and password)-->scope(global)-->username(navathej408)-->password(paste token here)-->id(dockerhub)-->description(dockerhub) 
------------------------------------
Complete EndToEnd code
------------------------------------
pipeline{
    agent{
        label "jenkins-agent"
    }
    tools{
        jdk 'java17'
        maven 'Maven3'
    }
    environment {
        APP_NAME = "myabcd"
        RELEASE = "1.0.0"
        DOCKER_USER = "navathej408"
        DOCKER_PASS = 'dockerhub'
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }
    stages{
        stage("clenup workspace"){
            steps{
                cleanWs()
            }
        }
        stage("checkout code"){
            steps{
                git 'https://github.com/thej950/maven.git'
            }
        }
        stage("build application"){
            steps{
                sh 'mvn clean package'
            }
        }
        stage("test application using maven"){
            steps{
                sh 'mvn test'
            }
        }
        stage("sonarqube Analysis"){
            steps{
                script{
                     withSonarQubeEnv(credentialsId: 'jenkins-sonarqube'){
                        sh "mvn sonar:sonar"
                    }
                }
            }
        }
        stage("Quality Gate"){
            steps{
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube'
                }
            }
        }
        stage("create file"){
            steps{
                sh '''echo "FROM tomee \nMAINTAINER thej \nCOPY webapp/target/webapp.war /usr/local/tomee/webapps/app11.war">dockerfile'''
            }
        }
        stage("build and push image"){
            steps{
                script{
                    docker.withRegistry('',DOCKER_PASS){
                        docker_image = docker.build "${IMAGE_NAME}"
                    }
                    docker.withRegistry('',DOCKER_PASS){
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }
        stage("deploy into productions"){
            steps{
                script{
                sh "ssh ec2-user@172.31.9.87 kubectl apply -f deployment-service.yml"
                }
            }
        }
    }
}
