# mysql and adminer with services 
# here mysql run on taint machine and adminer run on another machine 
# step1: apply tant on one machine with key1=value1 
# step2: run this file then automatically mysql will be placed on tain machine adminer will be placed on another machine 
# step3: here mysql servie file and adminer file NodePort must open in the cluster then it will be access from browser 
#############################################################################################################
# there are so many ways to do this scenario this is the simplest way to setup only ##############
# #########################################################################################################
#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: your-root-password
        - name: MYSQL_DATABASE
          value: your-database-name
        - name: MYSQL_USER
          value: your-username
        - name: MYSQL_PASSWORD
          value: your-password
        ports:
        - containerPort: 3306
      tolerations:
        - key: key2
          operator: Equal
          value: value2
          effect: NoSchedule
...
# above file is a mysql pod that will be placed on tainted machine
# To access mysql from tainted machine we need to open ports for that below are service for mysql
# actually we dont need to service port for mysql for normal setup 
# but in this case we used to placed mysql on tainted machine (tainted machine like it is isolated system ) so for that we need to access from adminer client we need service port for that 
# tainted machine not allow other pods to place on itself 
# example: (taint machine is like private subnet inside vpc )
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
      nodePort: 31001
  type: NodePort
...
# above file are service file for mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer:latest
...
# above file are adminer cliet to access mysql from browser 
---
apiVersion: v1
kind: Service
metadata:
  name: adminer-service
spec:
  type: NodePort
  ports:
    - targetPort: 8080
      port: 8080
      nodePort: 30005
  selector:
    app: adminer

...
# above file are service file for adminer 
# there are so man use cases to do this mysql placed on taint machine but it is simple way only 
# i try this do scaling bu when i scaling the mysql pods will be placed on different machine also 
# to avoid this type try different scenario for those below are some steps 
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ############################################################################################################
# ################    USE THIS SCENARIO TO DO MULTIPLE PODS SETUP ON TAINTED MACHINE ##########################
# ###########################################################################################################
# step1: add nodeaffinity on slave level key=value
# step2: create a mysql file provide nodeaffinity section perform inside file 
# step3: then after create pods on only perticular slave then perform taint on that system 
# step4: now create myadminer and services file in the cluster  
# ########################    I think this is one way to setup multiple mysql pods on sigle slave  #############
# ##############################################################################################################
#
#
#
