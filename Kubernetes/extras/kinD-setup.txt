KinD Setup  
------------------
step1: install kind on ubuntu with simple 3 commands 
Link: https://kind.sigs.k8s.io/docs/user/quick-start/#installation

step2: install kubectl command line tool for to communicate cluster
Link: https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

step3: install docker for supports for To setup KinD environment 
Link: https://get.docker.com/
 
# kind create Cluster  
-->To create a K8s cluster above command will create one default cluster that name can be (kind-kind) it will provide single node that will be worker and controll node

# kind get Clusters
-->from above command will get current running cluster 

# kubectl cluster-info --context kind-kind
-->To see cluster information
========================Below are output=================================================
root@thej-machine:~# kubectl cluster-info --context kind-kind
Kubernetes control plane is running at https://127.0.0.1:36989
CoreDNS is running at https://127.0.0.1:36989/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
==========================================================================================

# kubectl cluster-info 
-->above command will show information about cluster 


# kubectl get nodes 
-->above command will shows nodes 

# kind create cluster --name mycluster  
-->from above commad we can able to create customised cluster name 

# docker ps  
-->from above command will display currently runing cluster here in kind Environment

# docker exec -it lind-control-plane bash 
-->from above command able to enter into cluster node
 
# kind delete cluster 
-->above command used to delete a default cluster 

 Setup Multiple kind Clusters 
-------------------------------------------
# kind create cluster 
-->from above command  creating default cluster
 
# kind create cluster --name mycluster 
-->from above command able to create customised cluster with different name  

# kind get cluster 
-->from abobe command  will show cluster in the kind environment 

# docker ps 
-->from above command  we can identify how many clusters with theire names also it will show 

# kubectl get nodes
-->from above command will display nodes from default cluster which is kind-kind i want display nodes from kind-mycluster also for that see below command 

# kubectl get nodes --context kind-kind
-->from above command will display nodes fom kind-kind only this is default cluster

# kubectl get nodes --context kind-mycluster 
-->from above command will display nodes from kind-mycluster

# kubectl config get-contexts
-->from above command will show all cluster names in the KinD Environment

-->Below command are To switch from one cluster to another cluster in the kind environment same like changing branching in the git ($ git checkout branch loans)
# kubectl config use-context kind-kind 
-->from above command there is kind-kind is the cluster name  

# kind delete cluster 
-->above command will default cluster which is here kind-kind default one 

# kind delete cluster --name mycluster 
-->above command will perform deletion of customised cluster which is here kind-mycluster

Multi-node kind cluster (using config file)
----------------------------------------------------------
-->here we are going to create multi-node cluster using below file
# vim /tmp/kind.yml 
=====================
kind: cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: control-plane
- role: control-plane
- role: worker
========================
# kind create cluster --config /tmp/kind.yml  
-->from above file here we are creating multi master cluster (three master node and one worker node ) 
-->this setup it is here in it will  automatically Configuring externall loadbalancer  why because if one cluster gets down then automatically another cluster will be there 

# docker ps -->here we can see how many created 
# kubectl get nodes 


Deploying older Kubernetes version ( change the node image ) 
------------------------------------------------------------------------------------
-->here how to deploy specific version of kubernetes cluster 

Link: https://github.com/kubernetes-sigs/kind/releases 
-->from above link will navigate to cluster versions to download 

# kind create cluster --help 
-->above command will display some commands and it will describes about command 

# kind create cluster --image  kindest/node:v1.26.6@sha256:6e2d8b28a5b601defe327b98bd1c2d1930b49e5d8c512e1895099e4504007adb
-->from above command cluster will created based on that 1.26.6 version cluser here 

# kind delete cluster
-->above command will delete cluster  

Dynamic volume provisioning (local path provisioner)
---------------------------------------------------------------------------
-->here to it will comes with defaults storage class if we want to change and use with another one 
# kind create custer 
# kubetcl get sc -->to see storage class ( by default storage class is standard in the cluster ) 

# git clone https://github.com/justmeandopensource/kubernetes.git
# cd kubernetes/yamls
# ls -l *pvc* 
open 4-pvc-nfs.yaml edit this file
# vim 4-pvc-nfs.yaml
===============================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-demo
spec:
  accessModes:
     - ReadWriteOnce
  resources:
     requests:
       storage: 500Mi
=================================
# kubectl create 4-pvc-nfs.yaml
# kubectl get pv,pvc

# vim create -f 4-busybox-pv-hostpath.yaml
===================================
apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  volumes:
    - name: host-volume
      persistentVolumeClaim:
        claimName: pvc-demo
   containers:
     - name: busybox
       image: busybox
       command: ["/bin/bash"]
       args: ["-c","sleep 600"]
       volumeMounts:
         - name: host-volume
           mountPath: /mydata 
=====================================
# kubectl create -f 4-busybox-pv-hostpath.yaml
# kubetcl get pods
# kubectl get pv,pvc
-->from above scenario persistent volume and prsistent volume gets bounded

Using Load Balancer (Metal LB)
--------------------------------------------
# kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/master/manifests/namespace.yaml
-->above command will create namespace which is metab
# kubectl get ns 
# kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
-->it will create memberlist 
# kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/master/manifests/metallb.yaml
-->above commad will create all resources 

# docker network inspect -f '{{.IPM.config}}' kind
-->above command will display docker network 
# vim /tmp/metallb.yaml
========================================
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
      - name: default
        protocol: layer2
        addressess:
          - 172.18.255.200-172.18.255.250  
=============================================
-->here changing from ip to  - 172.18.255.200-172.18.255.250  my ip network ti use 
# kubectl create -f /tmp/metallb.yaml
# kubectl create deploy nginx --image nginx 
# kubectl expose deploy nginx --port 80 --type LoadBalancer
# kubetcl get all
#lynx 172.18.255.200
Note: lynx is command line web browser
================================================== 
Refer Youtube Link: https://www.youtube.com/watch?v=kkW7LNCsK74