Kubernetes Docker 18th session
---------------------------------
-->kubernetes is a orchestration tool same like docker swarm
-->kubernetes comes from google 
-->initially docker didn't have docker swarm to used for dev and test environment 
-->then google comes up with tool called kubernetes to implement container orchestration on top of docker 
-->initially docker didn't support scaling and load balancing and high availability so google created this tool called kubernetes
-->when you implemented kubernetes on top of docker all features like load balancing and scaling and high avaialability were triggered 
-->then docker came up with docker swarm to do same container orchestration same like kubernetes
-->Now google thinks docker swarm is competetative for kuberenetes then google make kubernetes opensource 
-->Now kubernetes more popular the reason already docker holds container industry then all oraganization did not want to monopoly of docker so they created more and more code library and kubernetes becoming more powerfull and popular 
-->Now kubernetes is most widely used tool for container orchestration tool
--------------------------------------
menions:
-------
-->it means machine name in kubernetes and called as node 
-->master and slave1 and slave2 and slave3 etc is called as kubernetes cluster 
-->kubernetes cluster combination of master and slave machine and also called as node or "menions"
-->all commands were excuting at the level of master machine
-->similarly in docker all commands were executing at the level manager right and manager also work like worker in docker 
-->but in kubernetes is only master machine it does not take load on master 
-----------------------------
Kubernetes objects:
-----------------------
1.pod
2.service 
3.namespace
4.replication controller (outdated)
5.replicaset
6.deployment
7.statefulset and stateless
8.persistent volume object
9.persistentVolumeClaim
10.horizontalPodAutoscaler
-----------------------
1.pod
-------
-->pod is layer of obstraction on top of docker docker containers
-->smallest objects in kubernetes is called pod within the pod we have container 
-->why kubernetes doesn't work on directly on containers why it is workig on pod 
-->kubernetes command starts like kubectl this command works on pod
-->the pod works like translater it understand which container inside and accordingly it will translate then container will understand 
-->advantages here kubernetes directly not talk to containers because there are different type of vendors Docker and CRIO 
-->docker containe one set of commands and crio containe one set of commands to overcome this problem kubernetes implement pod to communicate pod translate commands and work like mediator between kubernetes and pod inside container 
-->pod has intelligence what container inside and perform necessary translation 
-->kubernetes not design specially for docker it is design to work as generic container orchestration tool it will work on any container 
-->pod also has some disadvantage it is not fast as docker swarm 
-->because docker commands directly works on docker container 
-->in kubernetes commands first working on pod and pod understand and transalte to contaiers 
==============================================
2.service obeject:
-------------------
-->obeserver image 2
-->one container with wordpress and aother contaier with mysql they both have in the same network they commuicate with each other
-->now if wordpress container crashes then automatically a new container will created based on high availabilty and desired state in the orchestration tool but problem is here that new container will automatically assigned with new ip then commuication will might be lost between wordpress and mysql
-->to overcome this problem we use service object
-->observer image 2
-->first i create pod p1 with wordpress container 
-->second i create pod p2 with mysql container 
-->now service object comes into picture it will maintaine ip address of ip1 and ip2 
-->ip1 for wordpress and ip2 for mysql 
-->now wordpress gets crashes then kubernetes recreate that pod 
-->and service object make sure that same ip will be assigned for newly recreated container will be given 
-->now communication is ok because same ip will be given to container 
-->here we are not call multicontainer architecture we call multi pod architecture each pod will comes with ip address 
-->container orchestration means high availabilty 
-->if pod crashes then autoamtiocally a new pod will create and based on service object ip will be same 
-->service object ensure that irrespective of your pod how many times it will crash and recreated with same ip will be given 
======================================================
Namespace beject:
------------------
Cluster:
----------
-->observe image3
-->cluster means entire architecture with multiple machine is called  cluster master and slave machines combiation is called cluster 
-->observe image cluster  
-->the entire kubernete setup is called as cluster 
-->all machine hardware information might be 1000gb 30cpu and 40gb memory is called one partition obeserve image 5
-->observe image4
-->divide entire cluster into logicall parts is called namespace 
-->the advantage here all microservices architecture i will put in one namespace 
-->for example i create a lamp architecture  i give namespace like LAMP  there all pod will be placed related to LAMP architecture 
-->it is basically a way things organising better way 
-->example like i created a  namespace inside cluster and divided into logicall parts placed some one namespace prod environment and another one test environment and dev environment that is nothing but logicall partition 

-----------------------
-->NameSpace is nothing but a logically divided or make partitions inside cluster is called one namespace in entire cluster
-->using namespace able to segregate enviroments on each namespace     
===========================================
4.replication controller
------------------------------
-->this is highlevel object for kubernetes which is used for prforming two activities of container orchestration load balancing ad scaling 
-->in docker swarm when creating multiple replicas they are distributed in cluster 
-->similarly in kubernetes they will be distributed to  slave1 and slave2 etc 
-->now pod are running in the cluster into different slaves they are control by high level object is called as replication controller 
-->imagin i created tomact with  replicas they are placed in 3 slave 
-->observer image5 
-->now within the replication controller we have pod inside pod we have containers 
-->replication controller perform load balance and scalig 
=========================================================================
5.replicaset:
-------------------
-->replication controller is outdated it is replaced with replicaset 
-->replication controller is like performig load balancing and scaling where replicaset perform activity and it also has some additional components that component called as selecter 
-->byhelp of selecter it is reused pod 
-->it can search pods based on a perticular label if those kind of pods are there it will those pods ad try to reuse them 
====================================================
6.deployment object:
--------------------------
-->it is much more high level object when you create deployment automatically there will be an replicaset in it and you have already have replicaset then inside replicaset pod are available inside pods you have containers 
-->because already replicaset present it can perform load balancing and scaling 
-->deployment can also perform rolling updates 
--------
Q:what is difference between replicaset and deployment
-->replicaset performing load balancing and scaling where deployment will perform loadbalancing and scaling and rolling updates 
==============================================================
7.statefulset obejct:
-------------------------
-->there are actually statefull application and stateless application 
-->stateless application less worried application 
-->satefull application stores some amount data make sure that data not lost 
ex: httpd  webserver it simply take request and perform based o request those type of application called as stateless and MYSQL is data base  application it is  state full application 
-->if httpd contaier crashes not worried but mysql crasesh we need to worry
-->docker swarm only work based stateless applications if data loss will be lost
-->kubernetes work based on stateless and statefull applications 
=========================================================================
8.persitent volume obeject:
9.persitent volume claim:
----------------------------
-->entire cluster we have 1000gb storage from that storage persitent volume create 100gb for volume now kubernetes understand out of 100gb remaing 900gb will be use to work 100gb for bachup
-->from that 100gb using persitent volume claime i want to use 5gb
-->so i will create something called like pvc 5gb from that i create mysql pod 
-->tomorrow i want create tomcat pod agai i create pvc 10gb 
-->from entire cluster storage is persistent volume 
-->from that persistent volume taking storage is called persistent volume claim
===================================================
10.horizotalprodAutoscaler
-----------------------------
-->kubernetes has intelligence increase and decrease pod automatocally in horizontally
========================================================================= 