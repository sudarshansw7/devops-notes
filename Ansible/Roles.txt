Ansible 10th Session Roles 
-----------------------
Role:
--------
1.what is role
In Ansible, a role is a collection of tasks, files, templates, variables, and other resources that can be reused across multiple playbooks. A role can be thought of as a modular, reusable component that encapsulates a specific functionality, such as installing a package, configuring a service, or managing a user.

Roles provide a way to organize and package related tasks and files, making them easier to reuse and share. Roles can also be parameterized, allowing you to customize their behavior by passing in variables.

A typical Ansible role directory structure includes subdirectories for defaults, files, handlers, meta, tasks, templates, tests, and vars. The tasks directory is where you define the main tasks for the role, while the vars directory contains variables that can be used by the tasks. The files directory contains files that need to be transferred to the remote host, and the templates directory contains Jinja2 templates that can be used by the tasks.

Roles can be installed from Ansible Galaxy, which is a repository of community-contributed roles. You can also create your own roles and share them with others. Roles provide a powerful way to organize and reuse Ansible code, making it easier to maintain and scale your infrastructure automation.
=============
generated by AI
-------------------------------------------
-->role is predefined directory or foleder strucher 
-->each directory design for perticular activity 
-->we need to understand purpose of that directory and place the coresponding component within that directory 
------------------------------------------
--> $ sudo cd /etc/ansible/roles 
	-->by default roles directory available in that location 
	-->command to enter into roles directory 
--> there we need to create ansible role 
-----------------------------------
--> $ sudo absible-galaxy init apache
	-->above command it will create a role name with apache
	-->ansible-galaxy means it is a cloud site of ansible where already predefined roles are present 
	-->apache is name of that role 
-----------------------------
--> $ sudo ansible-galaxy init apache --offline 
	-->above command instead of online it will create role in offline
-------------------
--> whenever role can be created that role comes with specific directory strucher
++++++++++++++++++++++++++++++++ 
 ------	<role_name>
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
├── vars
│   └── main.yml
└── README.md
----------------------------------
Here is an explanation of the main directories and files:

defaults: This directory contains default variables for the role.
files: This directory contains files that need to be transferred to the remote hosts.
handlers: This directory contains handlers that can be used by the tasks in the role.
meta: This directory contains metadata about the role, such as its author, license, and dependencies.
tasks: This directory contains the main tasks for the role.
templates: This directory contains Jinja2 templates that can be used by the tasks in the role.
tests: This directory contains tests that can be run against the role.
vars: This directory contains variables that can be used by the tasks in the role.
README.md: This file should contain a description of the role and how to use it.
Note that some of these directories and files are optional, and you can customize the directory structure to fit your needs
+++++++++++++++++++++++++++++++++++++++
step1: enetr into roles directory
step2: sudo ansible-galaxy init apache --offline
	-->above command will create a offline apche role
step3: $ tree
 ------	<role_name>
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
├── vars
│   └── main.yml
└── README.md
-->every directory has own activity to do function role
step4: enter into apache directory 
	$ cd apache
step5: enter into tasks directory 
	$ cd tasks 
note:tasks This directory contains the main tasks for the role.
step6: enter into main.yml give tasks in that
	$sudo vim main.yml
========================================
---
# tasks file for apache
---
- include: install.yml
- include: configure.yml
- include: check_url_response.yml
=============================================
note: include module it is capable of call child playbooks 
--------------
step7: create a child playbooks for necessary for tasks and for role 
$sudo vim install.yml
============================================
---
- name: install apche2
  apt:
    name: apache2
    state: present
    update_cache: yes
...
========================================
$sudo vim configure.yml
=============================================
---
- name: copy index.html
  copy:
    src: index.html
    dest: /var/www/html
  notify: Restart apache
...
====================================================
$sudo vim check_url_response
========================================================
---
- name: to check url connection
  uri:
    url:"{{item}}"
    status_code: 200
  with_items:
    - http://public_ip
    - http://public_ip

...

=============================================
-->above tree playbooks are child playbooks which are need for excute from parent playbook
-->we give file index.html file in the configure.yml file in that file we use copy module we didn't specify path over there so if you not specifying path then controller will go to /etc/ansible/roles/apache/files directory search for that index.html in that location we must make sure that index.htnl file need to be available there at the time of excution of playbook 
-->now eneter into $cd files in the apache directory
-->create a index.html file
	$sudo vim index.html
========================================
<html>
	<body>
		<h1>intelliQ</h1>
	</body>
</html>
======================================
-->now goto handlers directory in the apache for we specify in the check_url_response.yml to use notify keyword for handlers
-->handlers means it is a module work based on notify keyword if in the playbook necesary above module comes in yellow color then only it will excute 
-->yellow color means necessary modification changes only it will excute handlers section 
	$cd handlers in the apache
	$sudo vim main.yml 
============================================
---
- name: Restart apache
  service:
    name: apache2
    state: restarted

...
==============================================================
-->now go to $ cd /etc/ansible/roles/
$sudo vim configure_apache.yml
=========================
---
- name: configure apache using roles
  hosts: all
  roles:
    - apache

...
========================================================================================
-->role cannot excute directly
-->role only call from playbook
-->now run the apache role
	$ansible-playbook configure_apache.yml -b
note:when you run above command first controller goto tasks section in that goto main.yml file in that three steps need to done based on those steps role will work accordingly 
----------------------------------------------------------------------
===============================================================================
Tomcat configure 
--------------------
$ sudo ansible-galaxy init tomcat --offline
	-->tomcat role created based on above command        
$ cd tomcat/tasks
$ sudo vim main.yml
=====================================
# tasks file for tomcat
---
- include: install.yml
- include: configure.yml
- include: check_ur_response.yml

...

==========================================
-->here we are using same module tree times intead of them use vars here for reducing modules 
==============================
---
- name: call child playbooks for tomcat
  include: "{{item}}"
  with_items:
    - install.yml
    - configure.yml
    - restart.yml

...
===================================
-->now create child playbooks in apache tasks section 
-->now here i want install two software tomcat9 and tomcat9-admin softeware 
$sudo vim install.yml -->inside tasks directory
==============================
---
- name: install tomcat9 and tomcat9-admin
  apt: 
    name: "{{item.a}}"
    state: "{{item.b}}"
    update_cache: "{{item.c}}"
  with_items:
    - {a: tomcat9, b: present, c:yes}
    - {a: tomcat9-admin, b: present, c: no}
...
================================ 
-->here role says that a ordered to achieve high levels of reuseability it is advisable you to dont hard core anything everything should be passwd in form of variables 
==============================
---
- name: install tomcat9 and tomcat9-admin
  apt: 
    name: "{{item.a}}"
    state: "{{item.b}}"
    update_cache: "{{item.c}}"
  with_items:
    - {a: "{{pkg1}}", b: "{{state1}}",  c:"{{cache1}}"}
    - {a: "{{pkg2}}", b: "{{state2}}",  c:"{{cache2}}"}

...
================================ 
-->create configure.yml file in the tasks directory 
	$ sudo vim configure.yml
=====================================
---
- name: copy tomcat-users.xml file
  copy:
    src: tomcat-users.xml
    dest: /etc/tomcat9
- name: change port from 8080 to 9090 
  replace:
    regexp: 8080
    replace: 9090
    path: /etc/tomcat9/server.xml
  notify: check url response

...
==================================
-->now changing to variable above playbook
=================================
---
- name: copy tomcat-users.xml file
  copy:
    src: "{{file1}}"
    dest: "{{dest1}}"
- name: change port from 8080 to 9090 
  replace:
    regexp: "{{port1}}"
    replace: "{{port2}}"
    path: "{{path1}}"
  notify: check url response

...
======================================  
note:above configure.yml file contain source file is tomcat-users.xml file that file need to available in the /etc/ansible/roles/tomcat/files directory with tomcat-users.xml filename or create that file over there
----------------------------
$cd files in the tomcat 
sudo vim tomcat-users.xml
==============================================
<tomcat-users>
	<user username="thej" password="thej" roles="manager-script"/>
</tomcat-users>
==================================================================================

-->create a restart.yml file in the tasks directory 
$ sudo vim restart.yml
=============================  
---
- name: Restart tomcat9
  service: 
    name: tomcat9
    state: restarted
- name: pause for 1 min 
  pause:
    minutes: 1
...
=============================
--> now changing to vars above playbook 
=============================  
---
- name: Restart tomcat9
  service: 
    name: "{{pkg1}}"
    state: "{{state2}}"
- name: pause for 1 min 
  pause:
    minutes: "{{min}}"
...
======================= 
--> goto handlers section we add notify in the configure.yml so to perform that notify go to handler directory open default main.yml file write handler modules information for run notify 
	$ cd handlers in the tomcat 
	$ sudo vim main.yml
=========================================
---
- name: check url response
  uri: 
    url: "{{item.a}}"
    status_code: "{{item.b}}" 
 with_items: 
    - {a: http://publick_ip:port, b: 200}
    - {a: http://publick_ip:port, b: 200}

...
==============================================
-->now changing to vars 
====================================================
---
- name: check url response
  uri: 
    url: "{{item.a}}"
    status_code: "{{item.b}}" 
 with_items: 
    - {a: "{{server1}}",b: "{{status1}}"}
    - {a: "{{server1}}",b: "{{status1}}"} 

...
===============================================================  
note: above all playbooks contain variable so we use variable for better reuseability to run all playbooks with variable we must include all variable and values in the vars directory

for example:
-------------
-->in /etc/ansible/roles/tomcat/tasks/install.yml -->in that file we use variables 
-->in /etc/ansible/roles/tomcat/tasks/configure.yml -->in that file we use variables
-->in /etc/ansible/roles/tomcat/restart.yml -->in that file we use variables
-->in /etc/ansible/roles/tomcat/handlers/main.yml.yml -->in that file we use variables
-->all playbooks contain some different usage of variable so we need to specify variable and values in the vars directory to run playbook role 
--------------------------------------------
$sudo cd vars in the tomcat directory 
$sudo vim main.yml
===========================================================
pkg1: tomcat9
pkg2: tomcat9-admin
state1: present
state2: restarted
cache1: yes
cache2: no 
file1: tomcat-users.xml
dest1: /etc/tomcat9
port1: 8080
port2: 9090
path: /etc/tomcat9/server.xml
min: 1
========================================================

$cd /etc/ansible/roles/
	-->entr into roles and create a playbook to excute tomcat role
$sudo vim configure_tomcat.yml
============================================
---
- name: configuring tomcat using roles
  hosts: all
  roles: 
    - tomcat

...
================================

-->variable name we specify in playbooks
-->another side values respectly each variable 
-->if we modify only here values  and some necessary changes will do here then all playbooks will work based on that 
-->by using this role reuseability is more 
-->this role based playbooks mostly useful for software related applications like tomcat9 and jenkins and httpd and many more  usage only 
--------------------------------------------------------------------------------
$ansible-playbook configure_tomcat.yml -b 
	-->above command will run tomcat role 
----------------------------------------------------------
