cherry-pick --git--3rd session-time 21:00 min
---------------
1.cherry-pick command used to pick commits from child branch selectively
  from child branch to master branch
2.that commits will be latest commits of the master branch (which meas HEAD)
------------------------------------------------------------------------------
merge --git--3rd session-time 00:40 sec
---------
1.merge it is a commnad used to merge child branch commits to master brach 
2.it means child branch commits copy all to master branch commits
3.this merge will perform based on time created file in ordered wise.
--------------------------------------------------------------------------------
rebase --git--3rd session-time 14:00 min
---------
1.rebase command used to merge with master branch in ordered to fast forward way
2.it will copy commits into master branch as a latest commits 
3.ordered perform this command 
	--> $ git rebase master --- at child branch level
	--> $ git checkout master
	--> $ git merge childbranchname --- at master branch level
------------------------------------------------------------------------------------
hard link delete --
---------------------------------
1.hard link delete it means child branch not merged with master branch 
2.delete this branch is called hard link delete
	--> $ git branch -D brachname
-------------------------------------------------------------------------------------
soft link delete 
---------------------------------
1.soft link delete it means child branch is merged with master branch
2.merge will perform copy commits from child branch to master branch
3.delete that branch is called soft link delete
	--> $ git branch -d branchname
--------------------------------------------------------------------------------------
NOTE: HEAD contain latest commits 
--------------------------------------------------------------------------------------
reset -- three types-- Git 3rd session time 33:00 min
--------------------
-->hard reset -- mostly devops will perform
-->soft reset
-->mixed reset 
hard reset
----------
1.git stores old version code and latest version code 
2.to move one version to another version use command reset
	--> $ git reset --hard commitid --this commit go into latest commit (HEAD)
--------------------
soft reset -- Git session 4th time 00:30 sec
--------------------
1.to understand soft and mixed reset. firstly understand from basic poin of view files  
2.there are tree type files 
	-->untracked files
	-->index files (STG)
	-->commited files (LR) -- here commited files go to repository
3.so here soft reset means one step back from commited files to index files when you perform soft reset
	-->commited file to index file
	$ git reset --soft previous_commited_id 
	note:previous commited id meas after head commit next latest commit 
	     suppose if head commit is C next to that B commit id 
	     -now C commit will go into index files to check for that use command $ git status
-------------------------------------------------------
mixed reset -- Git session 4th time 00:30 sec
---------------------
1.mixed reset means commited files to untracked file two step back 
2.same like soft reset will back to one step and mixed reset will back to two step 
	--> $ git reset --mixed previous_commited_id

-----------------------------------------------------------

STASH -- Git session 4th time 16:00 to 34:00
------------------------------
1.stash means once files sent into stash git unable to touch them files
2.using stash files hiding temporarly
3.stash able to hide files area wise, it means suppose there are 100 files in untracked area stash will hide all
  in the untracked area 
4.stash is section in Git. 
5.stash did not work on indivudual files it hide areas 
-------------
1.to stash all the files present in the stagiging area 
	$ git stash
2.to stash all the files in the stagging area and untracked section and .gitignore
	$ git stash -a
3.to see the list of all the stashes
	$ git stash list
4.to unstash a latest stash 
	$ git stash pop
5.to unstash an older stash 
	$ git stash pop stash{stashno}

----------------------------------------------------------------------------------------------------

Rearranging Commit ordered Git Session 4th time 34:00 min to 40:00 min

------------------------------------
1.for reaaranging commit ordered use rabase command 
2.rebase command not only work for fast farward ordered 
3.it also rearrange the commit ordered 
	$ git rebase -i HEAD~5 --- here i have maximum six commits so i take five commits to do rearrange 
				   first cannot be rearrange 

--------------------------------------------------------------------------------------------------------

SQUASH Git 4th Session time 40:00 to 44:00
---------------
1.merging commits is called squash
2.STASH is temporarly hiding data 
3.squash is merging the commits 
4.if you have huge commit history locally. before presenting to team you want to shortened that
  commit history       then go for squash 

--------------------------------------------------------------------------------------------------------
amend Git Session 4th time 44:00 
--------------------------------------------
1.here soft reset do one step back 
	commited to stagging area
2.here mixed reset do two step back 
	commited to stagging to untracked area 
3.those two activities can be triggred via amend command 
	$ git commit --amend -m "f" ----- m for modify 


-------------------------------------------------------------------------------------------------------------------- 
 

		