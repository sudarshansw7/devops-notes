Docker 17th Session docker stack and secret volume
-------------------------------------
-->Docker stack means Doker-compose + Docker swarm = docker stack
-->docker-compose + kubernetes = kompose
-------------------------
#docker stack deploy -c stackfileame stackname
	-->above command to create a docker stack file
#docker stack ls
	-->to see list of stack files
#docker stack rm stackname
	-->to remove stack file 
#docker stack ps stackname
	-->to see the service running
---------------------------------------------
#vim stack1.yml
==============================
---
version: '3.8'
services:
  mydb:
    image: mysql:5
    environment:
      MYSQL_ROOT_PASSWORD: intelliqit
  mywordpress:
    image: wordpress
    ports:
      - 8888:80
=====================================
#docker stack deploy -c stack1.yml my-app
	-->from above command to run stack file and giving name with my-app
#docker stack ls 
	-->to display stack files
#docker services ls
	-->to list services
#docker stack ps my-app
	-->to check running process of my-app  
#docker stack rm my-app
	-->to remove my-app services
----------------------------------------------------
-->To perform Load balancing at the level of stack file
#vim stack2.yml
===========================================
---
version: '3.8'
services:
  mydb: 
    image: mysql:5
    environment:
      MYSQL_ROOT_PASSWORD: intelliqit
    deploy:
      replicas: 2
  mywordpress:
    image: wordpress
    ports:
      - 8888:80
    deploy:
      replicas: 2
...
========================================
#docker stack deploy -c stack2.yml my-app
	-->from above command create containers based in the file 
-->Now to scale only mydb containers from 2 to 3 containres
#docker service scale my-app_mydb=3
	-->above command increase the containers from 2 to 3
----------------------------------------
#vim stack3.yml
================================================
---
version: '3.8'
services:
  myjenkins:
    image: jenkins/jenkins
    ports:
      - 5050:8080
    deploy:
      replicas: 2
  qaserver:
    image: tomcat
    ports: 
      - 6060:8080
    deploy:
      replicas: 3
  prodserver:
    image: tomcat
    ports:
      - 7070:8080
    deploy:
      replicas: 4
...
================================
#docker stack deploy -c stack3.yml ci-cd
#docker stack ps ci-cd
----------------------------------------
-->Now jenkins only run one server
-->tomcat run only run one server
-->similarly another tomcat for prod will run on only exclusively on single server
#vim stack4.yml
=======================================
---
version: '3.8'
services:
  myjenkins:
    image: jenkins/jenkins
    ports:
      - 7070:8080
    deploy:
      replicas: 3
      placement:
        constraints:
          - node.hostname == Manager
  qaserver:
    image: tomcat
    ports:
      - 6060:8080
    deploy:
      replicas: 3
      placement:
        constrants:
          - node.hostname == worker1
  prodserver:
    image: tomcat
    ports:
      - 5050:8080
    deploy:
      replicas: 4
      placement:
        constrants:
          - node.hostname == worker2
...
=================================================
#docker stack deploy -c stack4.yml ci-cd
note: node.hostname != manager -->it means not equal except that manager machine run containers to all remaing mahines
note:node.hostname == manager -->it means equal to exclusively run on that machine only
------------------------------------------
-->To setup upper limit of containers 31:00 min docker 17th session
#vim stack5.yml
==============================
---
version: '3.8'
services:
  hub:
    image: selenium/hub
    ports:
      - 4444:4444
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.1"
          memory: 300M
  chrome:
    image: selenium/node-chrome-debug
    ports:
      - 5901:5900
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.01"
          memory: "150M"
  firefox:
    image: selenium/node-firefox-debug
    ports:
      - 5902:5900
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: :0.01"
          memory: "150M"
...
==========================================
#docker stack deploy -c stack5.yml selenium

#docker service create --name webserver -p 8080:80 --mode=global

Note: --mode=global -->this is to ensure every machine contain nginx service must be run as container in the cluster and if one more machine added into cluster automatically nginx will create a container inside the machine based on --mode=global 
----------------------------
Docker secrets: min 40:00 docker 17th session
-----------------
-->Docker swarm cant handle volumes directly for that we use Docker secrets 
==============================================
#docker secret create mysecret - 
---------
write some 
this content will be availabel in mysecrets
----------
	-->from above command to create mysecret file on host machine which means on manager 
==========================================================
---------------------------------------------------------
#docker service create --name myredis --replicas 4 --secret mysecret redis
	-->from above command redis image run as 4 containers in the cluster with mounted with mysecret file to all 4 containers  
-->that file mysecret file will be stored inside container /run directory  
=========================================================











          