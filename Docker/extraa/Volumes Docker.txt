Docker volumes
-------------------
Docker volumes are a feature that allows containers to store data outside of the container's file system. This is useful because when a container is deleted, any data that was stored inside the container is also deleted. With volumes, you can persist data beyond the lifetime of a container, allowing you to reuse data across containers and ensuring that important data is not lost if a container is deleted or recreated.

Docker volumes can be created and managed using the Docker CLI or Docker Compose. Here are some common commands:
docker volume create <name>: Creates a new volume with the specified name.

docker volume ls: Lists all volumes that have been created on the host.

docker volume inspect <name>: Displays detailed information about the specified volume.

docker volume rm <name>: Deletes the specified volume.

docker run -v <host path>:<container path> <image>: Mounts a host directory or file into a container as a volume. The -v option specifies the path to the host directory or file and the path inside the container.

docker run --mount type=volume,source=<name>,target=<container path> <image>: Mounts a named volume into a container. The --mount option specifies the type of mount (in this case, a volume), the name of the volume, and the path inside the container.
Here are some examples of using volumes with Docker Compose:
==========================
version: "3"
services:
  my-service:
    image: my-image
    volumes:
      - my-volume:/data

volumes:
  my-volume:
================================
In this example, a named volume called my-volume is created and mounted into the my-service container at the /data path.
=====================================
version: "3"
services:
  my-service:
    image: my-image
    volumes:
      - /host/path:/data

=========================================
In this example, a host directory located at /host/path is mounted into the my-service container at the /data path.

Docker volumes provide a flexible and efficient way to manage data in Docker containers. They allow you to easily persist data across containers, scale your application, and ensure that important data is not lost when a container is deleted or recreated.
