To include SSH packages in a Dockerfile, you need to install the necessary SSH server packages inside the Docker image. Here's how you can modify your Dockerfile to install and configure SSH:
--------------------------------------------------------------
Dockerfile
---------------
FROM ubuntu

MAINTAINER thej

RUN apt update -y

# Install OpenSSH server and other necessary packages
RUN apt install -y openssh-server

# Create a new non-root user 'ubuntu' with password 'ubuntu' (You can change the password as per your preference)
RUN useradd -m -s /bin/bash ubuntu && echo 'ubuntu:ubuntu' | chpasswd

# Enable password-based SSH authentication
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

# Start the SSH service when the container starts
CMD ["/usr/sbin/sshd", "-D"]
--------------------------------------------------------------------------
Explanation:

FROM ubuntu: Start with the base Ubuntu image.
MAINTAINER thej: Mention the author or maintainer of the Dockerfile (optional; not commonly used since it's deprecated in Docker).
RUN apt update -y: Update the package repository cache within the container.
RUN apt install -y openssh-server: Install the OpenSSH server package. -y flag is used to automatically answer "yes" to all prompts during the installation process.
RUN useradd -m -s /bin/bash ubuntu && echo 'ubuntu:ubuntu' | chpasswd: Create a new user named "ubuntu" with the home directory (-m flag) and set the default shell to /bin/bash. The echo command is used to set the password for the user to "ubuntu" (change this password as needed).
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config: Enable password-based SSH authentication by modifying the SSH server configuration. This line allows the root user to log in with a password.
CMD ["/usr/sbin/sshd", "-D"]: Start the SSH service (sshd) when the container is launched and keep it running in the foreground (-D flag).
---------------------------------------------------
Once you have updated the Dockerfile, build a new Docker image using the following command:
-------------------------------------------------------
# docker build -t your_image_name .
-------------------------------------------------------------
Replace "your_image_name" with the desired name for your Docker image. Then, you can run a container based on this image and SSH into it:
------------------------------------------------------------------------------------
# docker run -d --name ssh_container -p 2222:22 your_image_name
-----------------------------------------------------------------------------------------------
The container will now be running with the SSH server enabled, and you can connect to it using SSH:
-----------------------------------------------------------------------
ssh ubuntu@localhost -p 2222
-----------------------------------------------------------------------------
Remember that using password-based authentication is generally less secure than using key-based authentication. If you plan to use this SSH setup in a production environment or on the internet, consider using SSH keys instead of passwords for enhanced security.