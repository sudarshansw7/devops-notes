what is difference between CMD and ENTRYPOINT in dockr file
------------------------------------------------------
CMD and ENTRYPOINT are both instructions in a Dockerfile that are used to specify the command that should be run when a container based on the image is started.

The main difference between CMD and ENTRYPOINT is how they are treated by Docker when a user specifies a command to run when starting a container.

CMD: Specifies the default command to be run when a container starts. This command can be overridden by the user when starting the container by specifying a new command. If multiple CMD instructions are specified in a Dockerfile, only the last one is used.
For example, the following Dockerfile sets the default command to run a Python script:
============================================
FROM python:3.9-slim-buster
WORKDIR /app
COPY . .
CMD ["python", "app.py"]
=================================================
When a container is started based on this image with the command docker run my-image, the app.py script will be executed as the default command. However, if the user starts the container with the command docker run my-image python other-script.py, the other-script.py script will be executed instead.

ENTRYPOINT: Specifies the executable to be run when a container starts, and any additional arguments are passed to that executable. If the user specifies a new command when starting the container, it is treated as an argument to the ENTRYPOINT command.
For example, the following Dockerfile sets the ENTRYPOINT to run a Python script:
====================================================
FROM python:3.9-slim-buster
WORKDIR /app
COPY . .
ENTRYPOINT ["python", "app.py"]
==================================================
When a container is started based on this image with the command docker run my-image, the app.py script will be executed as the main command. If the user starts the container with the command docker run my-image other-script.py, the other-script.py script will be executed as an argument to the ENTRYPOINT command, like this: python app.py other-script.py.

In summary, the main difference between CMD and ENTRYPOINT is that CMD specifies a default command that can be overridden by the user, while ENTRYPOINT specifies the main command to be run and treats any additional arguments as arguments to that command.
===========================================
The given Dockerfile is used to build a Docker image based on Ubuntu OS that installs the Nginx web server and exposes port 80.

Here's what each line of the Dockerfile does:

FROM ubuntu - This specifies the base image to use for the new image. In this case, we are using Ubuntu as the base image.

MAINTAINER thej - This line specifies the name and email address of the maintainer of the Dockerfile.

RUN apt-get update - This line updates the package lists on the Ubuntu base image.

RUN apt-get install -y nginx - This line installs the Nginx web server on the Ubuntu base image.

CMD ["/usr/sbin/nginx","-g","daemon off;"] - This line specifies the default command to run when a container is started from this image. It starts the Nginx web server and sets it to run as a daemon.

EXPOSE 80 - This line specifies that the container will listen on port 80.

When the Docker image is built using this Dockerfile, a container started from the resulting image will have Nginx web server installed and running, and will be listening on port 80. The default command specified in the CMD instruction will be executed automatically when the container starts.
===================
from above docker file i want to change some other default process how 
====================
If you want to change the default command executed when a container is started from the image created by the Dockerfile you provided, you can simply modify the CMD instruction.

For example, if you want to start a different process as the default command, you can change the CMD instruction to specify the new process you want to start. Here's an example:
-----------
FROM ubuntu
MAINTAINER thej
RUN apt-get update
RUN apt-get install -y nginx
CMD ["/bin/bash"]  # change default command to start bash
EXPOSE 80
----------------------
In this example, we have changed the default command to /bin/bash, which will start a bash shell in the container when it is started from the image.

You can also pass arguments to the command by modifying the CMD instruction. For example, if you want to pass an argument to the bash command, you can do it like this:
---------------------------
FROM ubuntu
MAINTAINER thej
RUN apt-get update
RUN apt-get install -y nginx
CMD ["/bin/bash", "-c", "echo Hello World!"] # run bash command with an argument
EXPOSE 80
------------------------
In this example, the container will start the bash command with the -c option, which allows you to specify a command to run in the shell. The command we specify is echo Hello World!, which will be executed when the container starts.

Remember to rebuild the Docker image using docker build command to apply the changes you made to the Dockerfile.
=======================
i want to excute default process from outside from outside container 
=============================
If you want to execute a different default process from outside the container, you can override the CMD instruction at runtime by specifying the command to run as an argument to the docker run command.

For example, if you want to run a different command as the default process when starting a container from the image created by the Dockerfile you provided, you can do it like this:
==========
docker run -it --rm your-image-name /bin/sh
==========
In this example, we are running the /bin/sh command instead of the default command specified in the CMD instruction. The --rm option removes the container when it stops, and the -it option allows you to interact with the container's shell.

You can also pass arguments to the command you want to run. For example, if you want to pass an argument to the bash command, you can do it like this:
=========
docker run -it --rm your-image-name /bin/bash -c "echo Hello World!"
===========
In this example, we are running the bash command with the -c option to specify a command to run in the shell. The command we specify is echo Hello World!, which will be executed when the container starts.

Remember that if you want to change the default command permanently, you need to modify the CMD instruction in the Dockerfile and rebuild the Docker image.
---------------------
