To include and run additional services/packages inside your Docker container, you can use the RUN instruction in your Dockerfile to install and start the desired services. Here's an example of how you can install and run the Apache web server along with the SSH server:
---------------------------------------------------
Dockerfile
------------------
FROM ubuntu

MAINTAINER thej

# Update package repository cache and install required packages
RUN apt update -y
RUN apt install -y openssh-server apache2

# Create a new non-root user 'ubuntu' with password 'ubuntu' (You can change the password as per your preference)
RUN useradd -m -s /bin/bash ubuntu && echo 'ubuntu:ubuntu' | chpasswd

# Enable password-based SSH authentication
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

# Start the SSH service and Apache web server when the container starts
CMD service ssh start && service apache2 start && tail -f /dev/null
-----------------------------------------------------
Explanation:

FROM ubuntu: Start with the base Ubuntu image.
MAINTAINER thej: Mention the author or maintainer of the Dockerfile (optional; not commonly used since it's deprecated in Docker).
RUN apt update -y: Update the package repository cache within the container.
RUN apt install -y openssh-server apache2: Install the OpenSSH server and Apache web server packages.
RUN useradd -m -s /bin/bash ubuntu && echo 'ubuntu:ubuntu' | chpasswd: Create a new user named "ubuntu" with the home directory (-m flag) and set the default shell to /bin/bash. The echo command is used to set the password for the user to "ubuntu" (change this password as needed).
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config: Enable password-based SSH authentication by modifying the SSH server configuration. This line allows the root user to log in with a password.
CMD service ssh start && service apache2 start && tail -f /dev/null: Start the SSH service (sshd) and the Apache web server (apache2) when the container is launched. The tail -f /dev/null command is used to keep the container running in the foreground after starting the services.
------------------------------------------------------------------------------------
Once you have updated the Dockerfile, build a new Docker image using the following command:

-------------------------------------------
# docker build -t your_image_name .
---------------------------------------------------------
Replace "your_image_name" with the desired name for your Docker image. Then, you can run a container based on this image:

-----------------------------------------------------------------------
# docker run -d --name my_container -p 2222:22 -p 80:80 your_image_name
--------------------------------------------------------------------------------
The container will now be running with both the SSH server and Apache web server services active. You can SSH into the container as shown in the previous response and access the Apache web server by visiting http://localhost in your web browser.

Please note that running both the SSH server and Apache in the same container is generally not recommended for production use due to security and management reasons. In a production environment, it's best to use separate containers for each service and use Docker Compose or Kubernetes to manage multi-container applications.




