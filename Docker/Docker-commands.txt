Docker 2nd Session
--------------------------
Docker images: Docker images are Combination of binarys and libraries  
-->once image runs into running condition we call that is container 
------------------------------------------------
1.imagine install windows on laptop
2.first download a iso file
3.once i downloaded that file i can install windows using that file and use that file and install windows some other system also 
4.now windows is running state so we called that windows OS 
-----------
in the similar way 
-----------------------
1.when it comes to docker original software we can call that image file when its  comes into running condition call it as containers 
2.using one image you can create as many containers you want 
-----------------
Docker installed system
-----------------------------
1.Docker client is application responsible to taking docker commands 
2.when you fire a command docker client accept command and passing to another backround process docker daemon 
3.docker daemon analyze what type of command it is then it will make work based on docker images or container or it will make this command registry 
4.registry classified into two types
	-->public registry (maintain by Docker Corporation)
	-->private registry (maintain and operate by your company)
5.registry means where Docker images are stored 
------------------------------------------------------ 
Docker Host: where docker is available system that system call as Docker Host machine
---------------------------------------------------------------------
1.launch ubuntu machine on aws
2.connect to machine 
3.go to get.docker.com website 
4.download a file get-docker.sh from website 
	$curl -fsSL https://get.docker.com -o get-docker.sh 
	-->this command will download a file from online 
	$ sh get-docker.sh 
	-->this command will excute the script file to download docker in the system 
	--> when you perform above commands it will automatically install docker based on there os 
	$ docker --version 
		-->it will display docker installed or not 
---------------------------------
Important docker commands
==============================
Working on docker images
===============================
1 To pull a docker image
  docker pull image_name

2 To search for a docker images
  docker search image_name

3 To upload an image into docker hub
  docker push image_name

4 To see the list of images that are downloaded
  docker images
  or
  docker image ls

5 To get detailed info about a docker image
  docker image inspect image_name/image_id

6 To delete a docker image that is not linked to any container
  docker rmi image_name/image_id

7 To delete a image that is linked to a container
  docker rmi -f image_name/image_id

8 To save the docker image as a tar file
  docker save image_name

9 To untar this tar file and get  image
  docker load tarfile_name

10 To delete all image
   docker system prune -af
===================================================================
11 To create a docker image from a dockerfile
   docker build -t image_name .

12 To create an image from a customised container
   docker commit container_id/container_name image_name

Working on docker containers
==================================
13 To see the list of running containers
   docker container ls

14 To see the list of all containers (running and stopped)
   docker ps -a

15 To start a container
   docker start container_id/container_name

16 To stop a container
   docker stop container_id/container_name

17 To restart a container
   docker restart container_id/container_name
   To restart after 10 seconds
   docker restart -t 10 container_id/container_name

18 To delete a stopped container
   docker rm container_id/container_name

19 To delete a running container
   docker rm -f container_id/container_name

20 To stop all running container
   docker stop $(docker ps -aq)

21 To delete all stopped containers
   docker rm $(docker ps -aq)

22 To delete all running and stopped containers
   docker rm -f $(docker ps -aq)

23 To get detailed info about a container
   docker inspect container_id/container_name

24 To see the logs genearated by a container
   docker logs container_id/container_name

25 To create a docker container
   docker run image_name/image_id
   run command options
   ---------------------
   --name:  USed to give a name to the container
   --restart: Used to keep the container in runnign condition
   -d: Used to run the container in detached mode in background
   -it: Used to open interactive terminal in the container
   -e: Used to pass environment varibales to the container
   -v : Used to attach an external device or folder as a volume
   --volumes-from: Used to share volume between multiple containers
   -p : Used for port mapping.It will link the container port with
        host port.Eg: -p 8080:80 Here 8080 is host port(external port)
        and 80 is container port(internal port)
   -P: Used for automatic port mapping where the container port is
       mapped with some host port that is greate than 30000
   --link : Used to create a link between multiple containers to create a
            microservices architecture.
   --network: Used to start a container on a specific network
   -rm : Used to delete a container on exit
   -m: Used to specify the upper limit on the amount of memeory that 
       a container can use
   -c: Used to specify the upper limit on the amout of cpu a container can use
   -ip: Used to asssign an ip to the container

26 To see the ports used by a container
   docker port container_id/container_name

27 To run any process in a container from outside the container
   docker exec -it container_id/container_name process_name
   Eg: To run the bash process in a container
   docker exec -it container_id/container_name bash

28 To come out of a container without exit
   ctrl+p,ctrl+q

29  To go back into a container from where the interactive terminal is running
    docker attach container_id/container_name

30  To see the processes runnign in a container
    docker container container_id/container_name top

Working on docker networks
===============================
31 To see the list of docker networks
   docker network ls

32 To create a docker network
   docker network create --driver network_type network_name

33 To get detailed info about a network
   docker network insepct network_name/network_id

34 To delete a docker network
   docker network rm network_name/network_id

35 To connect a running container to a network
   docker netowork connect network_name/network_id container_name/container_id

36 To disconnect a running container to a network
   docker netowork disconnect network_name/network_id container_name/container_id

Working on docker volumes
============================
37 To see the list of docker  volumes
   docker volume ls

38 To create a docker volume
   docker volume create volume_name

39 To get detailed info about a volume
   docker volume inspect volume_name/volume_id

40 To delete a volume
   docker volume rm volume_name/volume_id

===============================================================
